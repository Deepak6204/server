{
    "problems": [
        {
            "id": "1",
            "name": "Count Primes",
            "problem_statement": "Given an integer n, return the number of prime numbers that are strictly less than n.",
            "constraints": "0 <= n <= 5 * 10^6",
            "level":"easy",
            "testcase": [
                {
                    "input": "10",
                    "output": "4",
                    "explanation": "There are 4 prime numbers less than 10, they are 2, 3, 5, 7."
                },
                {
                    "input": "0",
                    "output": "0",
                    "explanation": "There are no prime numbers less than 0."
                },
                {
                    "input": "1",
                    "output": "0",
                    "explanation": "There are no prime numbers less than 1."
                }
            ],
            "java": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        Solution solution = new Solution();\n        int result = solution.countPrimes(n);\n        System.out.println(result);\n    }\n}\n\nclass Solution {\n    public int countPrimes(int n) {\n        // Implement the function to count primes\n        return 0;\n    }\n}",
            "cpp": "#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    int countPrimes(int n) {\n        // Implement the function to count primes\n        return 0;\n    }\n};\n\nint main() {\n    int n;\n    cin >> n;\n    Solution solution;\n    int result = solution.countPrimes(n);\n    cout << result << endl;\n    return 0;\n}",
            "python": "class Solution:\n    def countPrimes(self, n: int) -> int:\n        # Implement the function to count primes\n        return 0\n\nif __name__ == '__main__':\n    n = int(input())\n    solution = Solution()\n    result = solution.countPrimes(n)\n    print(result)\n",
            "c": "#include <stdio.h>\n\nint countPrimes(int n) {\n    // Implement the function to count primes\n    return 0;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int result = countPrimes(n);\n    printf(\"%d\\n\", result);\n    return 0;\n}"
        },    
        {
            "id": "2",
            "name": "Product of Array except self",
            "problem_statement": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer. You must write an algorithm that runs in O(n) time and without using the division operation.",
            "constraints": "2 <= nums.length <= 10^5\n-30 <= nums[i] <= 30\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.",
            "level":"easy",
            "testcase": [
                {
                    "input": "1,2",
                    "output": "[24,12,8,6]",
                    "explanation": "The product of all elements except nums[0] (1) is 24, except nums[1] (2) is 12, except nums[2] (3) is 8, and except nums[3] (4) is 6."
                },
                {
                    "input": "1,1",
                    "output": "[0,0,9,0,0]",
                    "explanation": "The product of all elements except nums[2] (0) is 9. For other indices, the result is 0 because multiplying by 0 yields 0."
                }
            ],
            "java": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int[] nums = new int[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = scanner.nextInt();\n        }\n        Solution solution = new Solution();\n        int[] result = solution.productExceptSelf(nums);\n        System.out.println(Arrays.toString(result));\n    }\n}\n\nclass Solution {\n    public int[] productExceptSelf(int[] nums) {\n        // Implement the function to calculate product of array except self\n        return new int[nums.length];\n    }\n}",
            "cpp": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> productExceptSelf(vector<int>& nums) {\n        // Implement the function to calculate product of array except self\n        return vector<int>(nums.size(), 1);\n    }\n};\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n    Solution solution;\n    vector<int> result = solution.productExceptSelf(nums);\n    for (int num : result) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "python": "class Solution:\n    def productExceptSelf(self, nums):\n        # Implement the function to calculate product of array except self\n        return [1] * len(nums)\n\nif __name__ == '__main__':\n    n = int(input())\n    nums = list(map(int, input().split()))\n    solution = Solution()\n    result = solution.productExceptSelf(nums)\n    print(result)\n",
            "c": "#include <stdio.h>\n\nvoid productExceptSelf(int* nums, int numsSize, int* returnArray) {\n    // Implement the function to calculate product of array except self\n    for (int i = 0; i < numsSize; i++) {\n        returnArray[i] = 1;\n    }\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int nums[n];\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &nums[i]);\n    }\n    int result[n];\n    productExceptSelf(nums, n, result);\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}"
        },
        {
            "id": "3",
            "name": "Multiply Strings",
            "problem_statement": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string. You must not use any built-in BigInteger library or convert the inputs to integers directly.",
            "constraints": "1 <= num1.length, num2.length <= 200\nnum1 and num2 consist of digits only.\nBoth num1 and num2 do not contain any leading zero, except the number 0 itself.",
            "level":"easy",
            "testcase": [
                {
                    "input": "2,3",
                    "output": "6",
                    "explanation": "The product of 2 and 3 is 6."
                },
                {
                    "input": "123,456",
                    "output": "56088"
                },
                {
                    "input": "0,0",
                    "output": "0"
                },
                {
                    "input": "999,999",
                    "output": "998001"
                },
                {
                    "input": "1,987654321",
                    "output": "987654321"
                },
                {
                    "input": "100,1000",
                    "output": "100000"
                }
            ],
            "java": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String num1 = scanner.next();\n        String num2 = scanner.next();\n        Solution solution = new Solution();\n        String result = solution.multiply(num1, num2);\n        System.out.println(result);\n    }\n}\n\nclass Solution {\n    public String multiply(String num1, String num2) {\n        // Implement the function to multiply strings\n        return \"\";\n    }\n}",
            "cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    string multiply(string num1, string num2) {\n        // Implement the function to multiply strings\n        return \"\";\n    }\n};\n\nint main() {\n    string num1, num2;\n    cin >> num1 >> num2;\n    Solution solution;\n    string result = solution.multiply(num1, num2);\n    cout << result << endl;\n    return 0;\n}",
            "python": "class Solution:\n    def multiply(self, num1, num2):\n        # Implement the function to multiply strings\n        return \"\"\n\nif __name__ == '__main__':\n    num1 = input()\n    num2 = input()\n    solution = Solution()\n    result = solution.multiply(num1, num2)\n    print(result)\n",
            "c": "#include <stdio.h>\n#include <string.h>\n\nvoid multiply(char* num1, char* num2, char* result) {\n    // Implement the function to multiply strings\n    strcpy(result, \"\");\n}\n\nint main() {\n    char num1[201], num2[201];\n    scanf(\"%200s %200s\", num1, num2);\n    char result[402];\n    multiply(num1, num2, result);\n    printf(\"%s\\n\", result);\n    return 0;\n}"
        },
        {
            "id": "4",
            "name": "Pow(x,n)",
            "problem_statement": "Implement pow(x, n), which calculates x raised to the power n (i.e., x^n).",
            "constraints": "-100.0 < x < 100.0\n-231 <= n <= 231-1\nn is an integer.",
            "level": "easy",
            "testcase": [
                {
                    "input": "2.00000, -2",
                    "output": "0.25000",
                    "explanation": "2^(-2) = 1/2^2 = 1/4 = 0.25"
                },
                {
                    "input": "2.00000, 10",
                    "output": "1024.00000"
                },
                {
                    "input": "2.10000, 3",
                    "output": "9.26100"
                },
                {
                    "input": "-2.00000, 3",
                    "output": "-8.00000"
                },
                {
                    "input": "0.00001, 2147483647",
                    "output": "0.00000"
                },
                {
                    "input": "1.00000, -2147483648",
                    "output": "1.00000"
                },
                {
                    "input": "-1.00000, -2147483648",
                    "output": "1.00000"
                },
                {
                    "input": "0.00001, -2147483648",
                    "output": "10000000000.00000"
                },
                {
                    "input": "1.50000, 0",
                    "output": "1.00000"
                },
                {
                    "input": "100.00000, 0",
                    "output": "1.00000"
                },
                {
                    "input": "-100.00000, 1",
                    "output": "-100.00000"
                },
                {
                    "input": "-2.00000, 10",
                    "output": "1024.00000"
                },
                {
                    "input": "-2.50000, 5",
                    "output": "-97.65625"
                },
                {
                    "input": "0.50000, 5",
                    "output": "0.03125"
                },
                {
                    "input": "2.00000, 1",
                    "output": "2.00000"
                },
                {
                    "input": "2.00000, -3",
                    "output": "0.12500"
                },
                {
                    "input": "0.10000, 10",
                    "output": "0.00001"
                },
                {
                    "input": "10.00000, -1",
                    "output": "0.10000"
                },
                {
                    "input": "2.71828, 2",
                    "output": "7.38906"
                },
                {
                    "input": "5.00000, 3",
                    "output": "125.00000"
                },
                {
                    "input": "0.00001, 2147483646",
                    "output": "0.00000"
                },
                {
                    "input": "100.00000, 2",
                    "output": "10000.00000"
                },
                {
                    "input": "3.14159, 2",
                    "output": "9.86960"
                },
                {
                    "input": "1.41421, 2",
                    "output": "2.00000"
                },
                {
                    "input": "2.00000, -3",
                    "output": "0.12500"
                },
                {
                    "input": "1.50000, 3",
                    "output": "3.37500"
                },
                {
                    "input": "1.00001, 2147483647",
                    "output": "1.00001"
                },
                {
                    "input": "0.99999, 2147483647",
                    "output": "0.99999"
                },
                {
                    "input": "-2.00000, 4",
                    "output": "16.00000"
                },
                {
                    "input": "-2.00000, 2",
                    "output": "4.00000"
                },
                {
                    "input": "0.00001, -1",
                    "output": "100000.00000"
                },
                {
                    "input": "100.00000, -2",
                    "output": "0.00010"
                },
                {
                    "input": "2.50000, 3",
                    "output": "15.62500"
                },
                {
                    "input": "0.00001, -1000000000",
                    "output": "100000000000000.00000"
                },
                {
                    "input": "-2.00000, 1000",
                    "output": "1.07151e+301"
                },
                {
                    "input": "1.00000, 2147483647",
                    "output": "1.00000"
                },
                {
                    "input": "3.00000, 7",
                    "output": "2187.00000"
                },
                {
                    "input": "2.50000, 4",
                    "output": "39.06250"
                },
                {
                    "input": "5.00000, -3",
                    "output": "0.00800"
                },
                {
                    "input": "0.33333, 3",
                    "output": "0.03704"
                },
                {
                    "input": "0.00001, 1",
                    "output": "0.00001"
                },
                {
                    "input": "10.00000, -3",
                    "output": "0.00100"
                },
                {
                    "input": "2.71828, -1",
                    "output": "0.36788"
                },
                {
                    "input": "7.00000, 2",
                    "output": "49.00000"
                },
                {
                    "input": "2.00000, 4",
                    "output": "16.00000"
                },
                {
                    "input": "0.50000, 10",
                    "output": "0.00098"
                },
                {
                    "input": "0.33333, -2",
                    "output": "9.00000"
                },
                {
                    "input": "5.00000, 5",
                    "output": "3125.00000"
                },
                {
                    "input": "1.00000, 1000000000",
                    "output": "1.00000"
                }
            ],
            "java": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double x = scanner.nextDouble();\n        int n = scanner.nextInt();\n        Solution solution = new Solution();\n        double result = solution.myPow(x, n);\n        System.out.printf(\"%.5f\\n\", result);\n    }\n}\n\nclass Solution {\n    public double myPow(double x, int n) {\n        // Implement the function to calculate pow(x, n)\n        return 0.0;\n    }\n}",
            "cpp": "#include <iostream>\n#include <cmath>\n#include <iomanip>\nusing namespace std;\n\nclass Solution {\npublic:\n    double myPow(double x, int n) {\n        // Implement the function to calculate pow(x, n)\n        return 0.0;\n    }\n};\n\nint main() {\n    double x;\n    int n;\n    cin >> x >> n;\n    Solution solution;\n    double result = solution.myPow(x, n);\n    cout << fixed << setprecision(5) << result << endl;\n    return 0;\n}",
            "python": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        # Implement the function to calculate pow(x, n)\n        return 0.0\n\nif __name__ == '__main__':\n    x, n = map(float, input().split())\n    n = int(n)\n    solution = Solution()\n    result = solution.myPow(x, n)\n    print(f'{result:.5f}')\n",
            "c": "#include <stdio.h>\n#include <math.h>\n\nvoid myPow(double x, int n, double *result) {\n    // Implement the function to calculate pow(x, n)\n    *result = 0.0;\n}\n\nint main() {\n    double x, result;\n    int n;\n    scanf(\"%lf %d\", &x, &n);\n    myPow(x, n, &result);\n    printf(\"%.5f\\n\", result);\n    return 0;\n}"
        },        
        {
            "id": "5",
            "name": "Majority Element I",
            "problem_statement": "Given an array nums of size n, return the majority element. The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.",
            "constraints": "n == nums.length\n1 <= n <= 5 * 10^4",
            "level": "easy",
            "testcase": [
                {
                    "input": "1",
                    "output": "1",
                    "explanation": "With only one element in the array, it is the majority element."
                },
                {
                    "input": "3,2,3",
                    "output": "3"
                },
                {
                    "input": "2,2,1,1,1,2,2",
                    "output": "2"
                },
                {
                    "input": "1,1,1,1,1,1,2,3,4,5",
                    "output": "1"
                },
                {
                    "input": "2,2,2,2,3,3",
                    "output": "2"
                },
                {
                    "input": "5,5,5,5,1,1,1,1,1",
                    "output": "1"
                },
                {
                    "input": "10,9,9,9,9",
                    "output": "9"
                },
                {
                    "input": "7,7,8,8,7,7,7",
                    "output": "7"
                },
                {
                    "input": "1,2,3,4,4,4,4",
                    "output": "4"
                },
                {
                    "input": "100,101,100,101,100",
                    "output": "100"
                },
                {
                    "input": "4,4,4,5,5,5,4",
                    "output": "4"
                },
                {
                    "input": "0,0,1,1,1,0,0,0,0",
                    "output": "0"
                },
                {
                    "input": "10,10,10,20,20",
                    "output": "10"
                },
                {
                    "input": "6,6,6,6,7,8,9",
                    "output": "6"
                },
                {
                    "input": "2,2,2,2,3,4,5",
                    "output": "2"
                },
                {
                    "input": "9,8,9,8,9,8,9,8,9",
                    "output": "9"
                },
                {
                    "input": "1,2,1,1,1",
                    "output": "1"
                },
                {
                    "input": "4,4,5,4,5,4,4",
                    "output": "4"
                },
                {
                    "input": "3,3,3,2,2,2,2,2",
                    "output": "2"
                },
                {
                    "input": "6,7,6,7,6,7,6",
                    "output": "6"
                },
                {
                    "input": "5,5,5,6,6,5,6,5,6,5",
                    "output": "5"
                },
                {
                    "input": "3,3,3,4,4,4,3",
                    "output": "3"
                },
                {
                    "input": "0,1,0,1,0,1,0",
                    "output": "0"
                },
                {
                    "input": "7,7,7,8,8,8,8",
                    "output": "8"
                },
                {
                    "input": "12,12,13,12,13,12,12",
                    "output": "12"
                },
                {
                    "input": "5,5,6,6,7,7,7,7,7",
                    "output": "7"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,8,8,8,8",
                    "output": "8"
                },
                {
                    "input": "1,1,1,1,1,2,3,4,5",
                    "output": "1"
                },
                {
                    "input": "9,9,8,8,8,8,8,8",
                    "output": "8"
                },
                {
                    "input": "3,3,4,4,3,3",
                    "output": "3"
                },
                {
                    "input": "2,2,3,3,2,3,2",
                    "output": "2"
                },
                {
                    "input": "6,6,7,7,7,7,7",
                    "output": "7"
                },
                {
                    "input": "4,4,4,4,5,5,6,6,7",
                    "output": "4"
                },
                {
                    "input": "0,0,0,0,1,1,2,2",
                    "output": "0"
                },
                {
                    "input": "3,3,3,3,3,3,3",
                    "output": "3"
                },
                {
                    "input": "2,2,2,2,2,3,3",
                    "output": "2"
                },
                {
                    "input": "1,1,1,1,2,2,2,2",
                    "output": "1"
                },
                {
                    "input": "5,5,5,5,6,6,7,7",
                    "output": "5"
                },
                {
                    "input": "7,7,7,7,8,8,9,9",
                    "output": "7"
                },
                {
                    "input": "6,6,7,7,7,6,7",
                    "output": "7"
                },
                {
                    "input": "0,0,0,0,0,1,2,3",
                    "output": "0"
                },
                {
                    "input": "4,4,4,5,5,4",
                    "output": "4"
                },
                {
                    "input": "1,2,3,4,4,4,4,4",
                    "output": "4"
                },
                {
                    "input": "10,10,10,10,11,11",
                    "output": "10"
                },
                {
                    "input": "7,7,7,8,8,7",
                    "output": "7"
                },
                {
                    "input": "2,2,3,3,4,4,4,4",
                    "output": "4"
                }
            ],
            "java": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        int[] nums = Arrays.stream(input.split(\",\")).mapToInt(Integer::parseInt).toArray();\n        Solution solution = new Solution();\n        int result = solution.majorityElement(nums);\n        System.out.println(result);\n    }\n}\n\nclass Solution {\n    public int majorityElement(int[] nums) {\n        // Implement the function to find majority element\n        return 0;\n    }\n}",
            "cpp": "#include <iostream>\n#include <sstream>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        // Implement the function to find majority element\n        return 0;\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    stringstream ss(input);\n    vector<int> nums;\n    int temp;\n    char delim;\n    while (ss >> temp) {\n        nums.push_back(temp);\n        ss >> delim; // Skip the comma\n    }\n    Solution solution;\n    int result = solution.majorityElement(nums);\n    cout << result << endl;\n    return 0;\n}",
            "python": "class Solution:\n    def majorityElement(self, nums):\n        # Implement the function to find majority element\n        return 0\n\nif __name__ == '__main__':\n    nums = list(map(int, input().split(',')))\n    solution = Solution()\n    result = solution.majorityElement(nums)\n    print(result)\n",
            "c": "#include <stdio.h>\n\nint majorityElement(int* nums, int numsSize) {\n    // Implement the function to find majority element\n    return 0;\n}\n\nint main() {\n    char input[1000];\n    fgets(input, 1000, stdin);\n    int nums[1000], numsSize = 0;\n    char* token = strtok(input, \",\");\n    while (token != NULL) {\n        nums[numsSize++] = atoi(token);\n        token = strtok(NULL, \",\");\n    }\n    int result = majorityElement(nums, numsSize);\n    printf(\"%d\\n\", result);\n    return 0;\n}"
        },        
        {
            "id": "6",
            "name": "Majority Element II",
            "problem_statement": "Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.",
            "constraints": "1 <= nums.length <= 5 * 10^4\n-10^9 <= nums[i] <= 10^9",
            "level": "easy",
            "testcase": [
                {
                    "input": "3,2,3",
                    "output": "3"
                },
                {
                    "input": "1",
                    "output": "1"
                },
                {
                    "input": "1,2",
                    "output": "1,2"
                },
                {
                    "input": "1,1,1,2,2,2,3,3,3,3,3",
                    "output": "1,3"
                },
                {
                    "input": "4,4,4,5,5,5,6,7,8,8,8",
                    "output": "4,8"
                },
                {
                    "input": "1,1,2,2,3,3,4,4,5,5,6",
                    "output": "1,2,3,4,5"
                },
                {
                    "input": "10,10,10,11,11,11,12,12",
                    "output": "10,11"
                },
                {
                    "input": "7,7,7,8,8,9,9,9,9,10",
                    "output": "7,9"
                },
                {
                    "input": "0,0,0,1,1,1,2,2,2,3",
                    "output": "0,1,2"
                },
                {
                    "input": "9,9,9,9,10,10,10,10,10,11",
                    "output": "10"
                },
                {
                    "input": "5,5,5,6,6,6,7,7,8",
                    "output": "5,6"
                },
                {
                    "input": "3,3,4,4,5,5,6,6,7,7,8,8,9,9",
                    "output": "3,4,5,6,7,8,9"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11",
                    "output": "1,2,3,4,5,6,7,8,9,10,11"
                },
                {
                    "input": "2,2,3,3,4,4,4,4",
                    "output": "4"
                },
                {
                    "input": "6,6,7,7,7,7,8,8,8",
                    "output": "7,8"
                },
                {
                    "input": "0,0,0,1,1,1,2,2,2,2,3,3",
                    "output": "0,1,2"
                },
                {
                    "input": "10,10,10,10,11,11,11,11,12",
                    "output": "10,11"
                },
                {
                    "input": "5,5,5,6,6,6,7,7,7,8",
                    "output": "5,6,7"
                },
                {
                    "input": "2,2,2,3,3,3,4,4,4,4",
                    "output": "2,4"
                },
                {
                    "input": "1,1,2,2,2,3,3,3,4,4",
                    "output": "2,3"
                },
                {
                    "input": "7,7,8,8,8,8,9,9,9",
                    "output": "8,9"
                },
                {
                    "input": "6,6,6,7,7,8,8,8,8",
                    "output": "6,8"
                },
                {
                    "input": "3,3,4,4,4,5,5,6",
                    "output": "4"
                },
                {
                    "input": "9,9,9,10,10,10,11,11,12",
                    "output": "9,10"
                },
                {
                    "input": "2,2,3,3,3,4,4,4",
                    "output": "3,4"
                },
                {
                    "input": "1,1,1,2,2,2,3,3,4,4",
                    "output": "1,2"
                },
                {
                    "input": "10,10,10,11,11,12,12,12",
                    "output": "10,12"
                },
                {
                    "input": "0,0,0,1,1,1,2,2,2,3,4,4",
                    "output": "0,1,2"
                },
                {
                    "input": "5,5,6,6,7,7,7,7,8,8",
                    "output": "7"
                },
                {
                    "input": "2,2,3,3,3,4,4,4,5,5",
                    "output": "3,4"
                },
                {
                    "input": "6,6,6,7,7,7,7,8,8,8,8",
                    "output": "6,8"
                },
                {
                    "input": "1,1,1,2,2,3,3,3,4,4,4,4",
                    "output": "1,4"
                },
                {
                    "input": "9,9,9,10,10,10,10,11,11,11",
                    "output": "10"
                },
                {
                    "input": "8,8,8,9,9,9,10,10,10",
                    "output": "8,9,10"
                },
                {
                    "input": "2,2,3,3,4,4,4,5,5,6",
                    "output": "4"
                },
                {
                    "input": "1,1,1,2,2,3,3,3,4",
                    "output": "1,3"
                },
                {
                    "input": "6,6,7,7,8,8,9,9",
                    "output": "6,7,8,9"
                },
                {
                    "input": "5,5,5,6,6,7,7,7,7",
                    "output": "5,7"
                },
                {
                    "input": "0,0,1,1,1,2,2,3,3",
                    "output": "1"
                },
                {
                    "input": "4,4,4,5,5,5,6,6,7",
                    "output": "4,5"
                },
                {
                    "input": "2,2,3,3,3,4,4,5",
                    "output": "3"
                }
            ],
            "java": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        int[] nums = Arrays.stream(input.split(\",\")).mapToInt(Integer::parseInt).toArray();\n        Solution solution = new Solution();\n        List<Integer> result = solution.majorityElement(nums);\n        System.out.println(result);\n    }\n}\n\nclass Solution {\n    public List<Integer> majorityElement(int[] nums) {\n        // Implement the function to find majority elements\n        return new ArrayList<>();\n    }\n}",
            "cpp": "#include <iostream>\n#include <sstream>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> majorityElement(vector<int>& nums) {\n        // Implement the function to find majority elements\n        return vector<int>();\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    stringstream ss(input);\n    vector<int> nums;\n    int temp;\n    char delim;\n    while (ss >> temp) {\n        nums.push_back(temp);\n        ss >> delim; // Skip the comma\n    }\n    Solution solution;\n    vector<int> result = solution.majorityElement(nums);\n    for (int num : result) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "python": "class Solution:\n    def majorityElement(self, nums):\n        # Implement the function to find majority elements\n        return []\n\nif __name__ == '__main__':\n    import sys\n    input = sys.stdin.read().strip()\n    nums = list(map(int, input.split(',')))\n    solution = Solution()\n    result = solution.majorityElement(nums)\n    print(result)",
            "c": "#include <stdio.h>\n#include <stdlib.h>\n\n// Function prototype\nvoid majorityElement(int* nums, int numsSize, int* returnSize);\n\nint main() {\n    char input[10000];\n    fgets(input, sizeof(input), stdin);\n    int nums[10000];\n    int numsSize = 0;\n    char* token = strtok(input, \",\");\n    while (token != NULL) {\n        nums[numsSize++] = atoi(token);\n        token = strtok(NULL, \",\");\n    }\n    int returnSize;\n    majorityElement(nums, numsSize, &returnSize);\n    for (int i = 0; i < returnSize; i++) {\n        printf(\"%d \", nums[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n\nvoid majorityElement(int* nums, int numsSize, int* returnSize) {\n    // Implement the function to find majority elements\n    *returnSize = 0;\n}"
        },
        {
            "id": "7",
            "name": "Bull and Cows",
            "problem_statement": "You are playing the Bulls and Cows game with your friend. You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info: The number of 'bulls', which are digits in the guess that are in the correct position. The number of 'cows', which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls. Given the secret number secret and your friend's guess guess, return the hint for your friend's guess. The hint should be formatted as 'xAyB', where x is the number of bulls and y is the number of cows.",
            "constraints": "1 <= secret.length, guess.length <= 1000\nsecret.length == guess.length\nsecret and guess consist of digits only.",
            "level": "easy",
            "testcase": [
                {
                    "input": "'1807','7810'",
                    "output": "1A3B",
                    "explanation": "Bulls are connected with a '|' and cows are underlined:\n'1807'\n  |\n'7810'"
                },
                {
                    "input": "'1123','0111'",
                    "output": "1A1B",
                    "explanation": "Bulls are connected with a '|' and cows are underlined:\n'1123'        '1123'\n  |      or     |\n'0111'        '0111'\nNote that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull."
                },
                {
                    "input": "'1234','5678'",
                    "output": "0A0B"
                },
                {
                    "input": "'1234','4321'",
                    "output": "0A4B"
                },
                {
                    "input": "'1111','1111'",
                    "output": "4A0B"
                },
                {
                    "input": "'1234','1234'",
                    "output": "4A0B"
                },
                {
                    "input": "'1234','4324'",
                    "output": "2A2B"
                },
                {
                    "input": "'1234','3412'",
                    "output": "2A2B"
                },
                {
                    "input": "'0000','0001'",
                    "output": "3A0B"
                },
                {
                    "input": "'9876','6789'",
                    "output": "0A4B"
                },
                {
                    "input": "'1234','5678'",
                    "output": "0A0B"
                },
                {
                    "input": "'4321','1234'",
                    "output": "0A4B"
                },
                {
                    "input": "'5678','8765'",
                    "output": "0A4B"
                },
                {
                    "input": "'1111','0000'",
                    "output": "0A0B"
                },
                {
                    "input": "'1234','4321'",
                    "output": "0A4B"
                },
                {
                    "input": "'1234','3412'",
                    "output": "2A2B"
                },
                {
                    "input": "'0000','1111'",
                    "output": "0A0B"
                },
                {
                    "input": "'5678','5678'",
                    "output": "4A0B"
                },
                {
                    "input": "'1234','3412'",
                    "output": "2A2B"
                },
                {
                    "input": "'1122','2211'",
                    "output": "0A4B"
                },
                {
                    "input": "'1234','1234'",
                    "output": "4A0B"
                },
                {
                    "input": "'1234','4321'",
                    "output": "0A4B"
                },
                {
                    "input": "'0000','1111'",
                    "output": "0A0B"
                },
                {
                    "input": "'1234','1234'",
                    "output": "4A0B"
                },
                {
                    "input": "'0000','0001'",
                    "output": "3A0B"
                },
                {
                    "input": "'5678','8765'",
                    "output": "0A4B"
                },
                {
                    "input": "'1234','3412'",
                    "output": "2A2B"
                },
                {
                    "input": "'4321','1234'",
                    "output": "0A4B"
                },
                {
                    "input": "'1111','1110'",
                    "output": "3A0B"
                },
                {
                    "input": "'1234','5678'",
                    "output": "0A0B"
                },
                {
                    "input": "'1234','3412'",
                    "output": "2A2B"
                },
                {
                    "input": "'0000','1111'",
                    "output": "0A0B"
                },
                {
                    "input": "'5678','8765'",
                    "output": "0A4B"
                },
                {
                    "input": "'1234','1234'",
                    "output": "4A0B"
                },
                {
                    "input": "'1122','2211'",
                    "output": "0A4B"
                }
            ],
            "java": "public class Main {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.getHint(\"1807\", \"7810\"));\n        System.out.println(sol.getHint(\"1123\", \"0111\"));\n    }\n}",
            "cpp": "#include <iostream>\n#include \"Solution.h\"\n\nint main() {\n    Solution sol;\n    std::cout << sol.getHint(\"1807\", \"7810\") << std::endl;\n    std::cout << sol.getHint(\"1123\", \"0111\") << std::endl;\n    return 0;\n}",
            "c": "#include <stdio.h>\n\nchar* getHint(const char* secret, const char* guess);\n\nint main() {\n    printf(\"%s\\n\", getHint(\"1807\", \"7810\"));\n    printf(\"%s\\n\", getHint(\"1123\", \"0111\"));\n    return 0;\n}",
            "python": "def main():\n    print(getHint(\"1807\", \"7810\"))\n    print(getHint(\"1123\", \"0111\"))\n\nif __name__ == '__main__':\n    main()"
            
        },
        {
            "id": "8",
            "name": "Valid Sudoku",
            "problem_statement": "Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: Each row must contain the digits 1-9 without repetition. Each column must contain the digits 1-9 without repetition. Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition. Note: A Sudoku board (partially filled) could be valid but is not necessarily solvable. Only the filled cells need to be validated according to the mentioned rules.",
            "constraints": "board.length == 9\nboard[i].length == 9\nboard[i][j] is a digit 1-9 or '.'.",
            "level": "easy",
            "testcase": [
                {
                    "input": "'5','3','.','.','7','.','.','.','.','6','.','.','1','9','5','.','.','.','.','9','8','.','.','.','.','6','.','8','.','.','.','6','.','.','.','3','4','.','.','8','.','3','.','.','1','7','.','.','.','2','.','.','.','6','.','6','.','.','.','.','2','8','.','.','.','.','4','1','9','.','.','5','.','.','.','.','8','.','.','7','9'",
                    "output": "true"
                },
                {
                    "input": "'8','3','.','.','7','.','.','.','.','.','6','.','.','1','9','5','.','.','.','.','9','8','.','.','.','.','6','.','8','.','.','.','6','.','.','.','3','4','.','.','8','.','3','.','.','1','7','.','.','.','2','.','.','.','6','.','6','.','.','.','.','2','8','.','.','.','.','4','1','9','.','.','5','.','.','.','.','.','.','.','.','.'",
                    "output": "false",
                    "explanation": "Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid."
                },
                {
                    "input": "'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.'",
                    "output": "true"
                },
                {
                    "input": "'5','3','.','.','7','.','.','.','.','6','.','.','1','9','5','.','.','.','.','9','8','.','.','.','.','6','.','8','.','.','.','6','.','.','.','3','4','.','.','8','.','3','.','.','1','7','.','.','.','2','.','.','.','6','.','6','.','.','.','.','2','8','.','.','.','.','4','1','9','.','.','5','.','.','.','.','.','.','.','.','.'",
                    "output": "true"
                },
                {
                    "input": "'5','3','.','.','7','.','.','.','.','6','.','.','1','9','5','.','.','.','.','9','8','.','.','.','.','6','.','8','.','.','.','6','.','.','.','3','4','.','.','8','.','3','.','.','1','7','.','.','.','2','.','.','.','6','.','6','.','.','.','.','2','8','.','.','.','.','4','1','9','.','.','5','.','.','.','.','.','.','.','.','1'",
                    "output": "false"
                },
                {
                    "input": "'5','5','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.'",
                    "output": "false"
                },
                {
                    "input": "'1','2','3','4','5','6','7','8','9','4','5','6','7','8','9','1','2','3','7','8','9','1','2','3','4','5','6','2','3','4','5','6','7','8','9','1','5','6','7','8','9','1','2','3','4','8','9','1','2','3','4','5','6','7','3','4','5','6','7','8','9','1','2','6','7','8','9','1','2','3','4','5','9','1','2','3','4','5','6','7','8'",
                    "output": "true"
                },
                {
                    "input": "'1','1','1','1','1','1','1','1','1','2','2','2','2','2','2','2','2','2','3','3','3','3','3','3','3','3','3','4','4','4','4','4','4','4','4','4','5','5','5','5','5','5','5','5','5','6','6','6','6','6','6','6','6','6','7','7','7','7','7','7','7','7','7','8','8','8','8','8','8','8','8','8','9','9','9','9','9','9','9','9','9'",
                    "output": "false"
                },
                {
                    "input": "'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.'",
                    "output": "true"
                }
            ],
            "java": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        char[][] board = new char[9][9];\n        for (int i = 0; i < 9; i++) {\n            String line = scanner.nextLine();\n            board[i] = line.toCharArray();\n        }\n        Solution solution = new Solution();\n        System.out.println(solution.isValidSudoku(board));\n    }\n}\n\nclass Solution {\n    public boolean isValidSudoku(char[][] board) {\n        // Implement the function to check if the Sudoku is valid\n        return true;\n    }\n}",
            "cpp": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool isValidSudoku(vector<vector<char>>& board) {\n        // Implement the function to check if the Sudoku is valid\n        return true;\n    }\n};\n\nint main() {\n    vector<vector<char>> board(9, vector<char>(9));\n    for (int i = 0; i < 9; i++) {\n        for (int j = 0; j < 9; j++) {\n            cin >> board[i][j];\n        }\n    }\n    Solution solution;\n    cout << (solution.isValidSudoku(board) ? \"true\" : \"false\") << endl;\n    return 0;\n}",
            "python": "class Solution:\n    def isValidSudoku(self, board):\n        # Implement the function to check if the Sudoku is valid\n        return True\n\nif __name__ == '__main__':\n    board = [list(input().strip()) for _ in range(9)]\n    solution = Solution()\n    print(solution.isValidSudoku(board))\n",
            "c": "#include <stdio.h>\n\nint isValidSudoku(char board[9][9]);\n\nint main() {\n    char board[9][9];\n    for (int i = 0; i < 9; i++) {\n        for (int j = 0; j < 9; j++) {\n            scanf(\" %c\", &board[i][j]);\n        }\n    }\n    printf(\"%s\\n\", isValidSudoku(board) ? \"true\" : \"false\");\n    return 0;\n}"
        },
        {
            "id": "9",
            "name": "Matrix Block Sum",
            "problem_statement": "Given a m x n matrix mat and an integer k, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for: i - k <= r <= i + k, j - k <= c <= j + k, and (r, c) is a valid position in the matrix.",
            "constraints": "m == mat.length\nn == mat[i].length\n1 <= m, n, k <= 100\n1 <= mat[i][j] <= 100",
            "level": "easy",
            "testcase": [
                {
                    "input": "1,2,3,4,5,6,7,8,9,1,1",
                    "output": "12,21,16,27,45,33,24,39,28,12,21,16,27,45,33,24,39,28"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,2,2",
                    "output": "45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45"
                },
                {
                    "input": "1,0,1",
                    "output": "1,1,1"
                },
                {
                    "input": "1,2,3,4,1,1",
                    "output": "10,11,11,10,10,11"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,0,1",
                    "output": "1,2,3,4,5,6,7,8,9,0,1"
                },
                {
                    "input": "2,3,4,5,6,7,8,9,10,2,2",
                    "output": "39,39,39,39,39,39,39,39,39,39,39,39"
                },
                {
                    "input": "1,1,1,1,1,1",
                    "output": "4,4,4,4,4,4"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,2,2",
                    "output": "39,43,47,41,61,68,75,65,91,101,111,95,105,116,127,104,39,43,47,41,61,68,75,65,91,101,111,95,105,116,127,104"
                },
                {
                    "input": "5,0,5",
                    "output": "5,5,5"
                },
                {
                    "input": "2,3,4,5,6,7,8,9,10,1,1",
                    "output": "16,19,16,21,27,21,19,23,19,16,19"
                }
            ],
            "java": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int m = scanner.nextInt();\n        int n = scanner.nextInt();\n        int k = scanner.nextInt();\n        int[][] mat = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                mat[i][j] = scanner.nextInt();\n            }\n        }\n        Solution solution = new Solution();\n        int[][] result = solution.matrixBlockSum(mat, k);\n        for (int[] row : result) {\n            System.out.println(Arrays.toString(row).replaceAll('[\\[\\],]', \"\"));\n        }\n    }\n}\n\nclass Solution {\n    public int[][] matrixBlockSum(int[][] mat, int k) {\n        // Implement the function to compute matrix block sum\n        return new int[mat.length][mat[0].length];\n    }\n}",
            "cpp": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int k) {\n        // Implement the function to compute matrix block sum\n        return vector<vector<int>>(mat.size(), vector<int>(mat[0].size(), 0));\n    }\n};\n\nint main() {\n    int m, n, k;\n    cin >> m >> n >> k;\n    vector<vector<int>> mat(m, vector<int>(n));\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            cin >> mat[i][j];\n        }\n    }\n    Solution solution;\n    vector<vector<int>> result = solution.matrixBlockSum(mat, k);\n    for (const auto& row : result) {\n        for (int val : row) {\n            cout << val << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}",
            "python": "class Solution:\n    def matrixBlockSum(self, mat, k):\n        # Implement the function to compute matrix block sum\n        return [[0] * len(mat[0]) for _ in range(len(mat))]\n\nif __name__ == '__main__':\n    m, n, k = map(int, input().split())\n    mat = [list(map(int, input().split())) for _ in range(m)]\n    solution = Solution()\n    result = solution.matrixBlockSum(mat, k)\n    for row in result:\n        print(' '.join(map(str, row)))\n",
            "c": "#include <stdio.h>\n\nvoid matrixBlockSum(int mat[][100], int m, int n, int k, int result[][100]) {\n    // Implement the function to compute matrix block sum\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            result[i][j] = 0;\n        }\n    }\n}\n\nint main() {\n    int m, n, k;\n    scanf(\"%d %d %d\", &m, &n, &k);\n    int mat[100][100];\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            scanf(\"%d\", &mat[i][j]);\n        }\n    }\n    int result[100][100];\n    matrixBlockSum(mat, m, n, k, result);\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            printf(\"%d \", result[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"
        },
        {
            "id": "10",
            "name": "Diagonal Traverse",
            "problem_statement": "Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.",
            "constraints": "m == mat.length\nn == mat[i].length\n1 <= m, n <= 10^4\n1 <= m * n <= 10^4\n-10^5 <= mat[i][j] <= 10^5",
            "level": "easy",
            "testcase": [
                {
                    "input": "1,2,3,4,5,6,7,8,9",
                    "output": "1,2,4,7,5,3,6,8,9"
                },
                {
                    "input": "1,2,3,4",
                    "output": "1,2,3,4"
                },
                {
                    "input": "1",
                    "output": "1"
                },
                {
                    "input": "1,2,3,4,5,6",
                    "output": "1,2,3,5,4,6"
                },
                {
                    "input": "1,2,3,4,5,6",
                    "output": "1,2,4,3,5,6"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16",
                    "output": "1,2,5,9,6,3,7,10,13,11,8,12,14,15,16"
                },
                {
                    "input": "1,2,3,4",
                    "output": "1,2,4,3,5,6"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,4,7,5,3,6,10,8,9,11,12"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10",
                    "output": "1,2,3,5,7,4,6,8,9,10"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10",
                    "output": "1,2,3,5,7,4,6,8,9,10"
                },
                {
                    "input": "1,2,3,4,5",
                    "output": "1,2,3,4,5"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,4,7,5,3,6,10,8,9,11,12"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20",
                    "output": "1,2,5,9,13,6,4,7,10,14,15,11,8,12,16,17,18,19,20"
                },
                {
                    "input": "1,2,3,4,5,6,7,8",
                    "output": "1,2,3,5,7,4,6,8"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20",
                    "output": "1,2,5,9,13,17,6,4,7,10,14,18,8,11,15,19,12,16,20"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,4,7,5,3,6,10,8,9,11,12"
                },
                {
                    "input": "1,2,3,4,5",
                    "output": "1,2,3,4,5"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,4,7,5,3,6,10,8,9,11,12"
                },
                {
                    "input": "1,2,3,4,5,6",
                    "output": "1,2,3,5,4,6"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,4,7,5,3,6,10,8,9,11,12"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20",
                    "output": "1,2,5,9,13,17,6,4,7,10,14,18,8,11,15,19,12,16,20"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,4,7,5,3,6,10,8,9,11,12"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9",
                    "output": "1,2,4,7,5,3,6,8,9"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10",
                    "output": "1,2,3,5,7,4,6,8,9,10"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,4,7,5,3,6,10,8,9,11,12"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,4,7,5,3,6,10,8,9,11,12"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,4,7,5,3,6,10,8,9,11,12"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,4,7,5,3,6,10,8,9,11,12"
                }
            ],
            "java": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int m = scanner.nextInt();\n        int n = scanner.nextInt();\n        int[][] mat = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                mat[i][j] = scanner.nextInt();\n            }\n        }\n        Solution solution = new Solution();\n        System.out.println(Arrays.toString(solution.findDiagonalOrder(mat)));\n    }\n}\n\nclass Solution {\n    public int[] findDiagonalOrder(int[][] mat) {\n        // Your implementation here\n    }\n}",
            "cpp": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> findDiagonalOrder(vector<vector<int>>& mat) {\n    // Your implementation here\n}\n\nint main() {\n    int m, n;\n    cin >> m >> n;\n    vector<vector<int>> mat(m, vector<int>(n));\n    for (int i = 0; i < m; ++i) {\n        for (int j = 0; j < n; ++j) {\n            cin >> mat[i][j];\n        }\n    }\n    vector<int> result = findDiagonalOrder(mat);\n    for (int num : result) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "python": "def findDiagonalOrder(mat):\n    # Your implementation here\n\nif __name__ == '__main__':\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    m, n = data[0], data[1]\n    mat = [data[i:i + n] for i in range(2, len(data), n)]\n    result = findDiagonalOrder(mat)\n    print(result)",
            "c": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid findDiagonalOrder(int** mat, int m, int n) {\n    // Your implementation here\n}\n\nint main() {\n    int m, n;\n    scanf(\"%d %d\", &m, &n);\n    int** mat = (int**)malloc(m * sizeof(int*));\n    for (int i = 0; i < m; ++i) {\n        mat[i] = (int*)malloc(n * sizeof(int));\n        for (int j = 0; j < n; ++j) {\n            scanf(\"%d\", &mat[i][j]);\n        }\n    }\n    findDiagonalOrder(mat, m, n);\n    for (int i = 0; i < m; ++i) {\n        free(mat[i]);\n    }\n    free(mat);\n    return 0;\n}"
        },
        {
            "id": "11",
            "name" : "Spiral Matrix",
            "problem_statement": "Given an m x n matrix, return all elements of the matrix in spiral order.",
            "constraints": "m == matrix.length\nn == matrix[i].length\n1 <= m, n <= 10\n-100 <= matrix[i][j] <= 100",
            "level":"easy",
            "testcase": [
                {
                    "input": "1,2,3,4,5,6,7,8,9",
                    "output": "1,2,3,6,9,8,7,4,5"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,3,4,8,12,11,10,9,5,6,7"
                },
                {
                    "input": "1",
                    "output": "1"
                },
                {
                    "input": "1,2,3,4",
                    "output": "1,2,4,3"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,3,6,12,11,10,7,4,5,8,9"
                },
                {
                    "input": "1,2,3,4,5,6",
                    "output": "1,2,3,6,5,4"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16",
                    "output": "1,2,3,4,8,12,16,15,14,13,9,5,6,7,10,11"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20",
                    "output": "1,2,3,4,5,10,15,20,19,18,17,16,11,6,7,8,9,14,13,12"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9",
                    "output": "1,2,3,6,9,8,7,4,5"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,3,6,12,11,10,7,4,5,8,9"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10",
                    "output": "1,2,4,6,8,10,9,7,5,3"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15",
                    "output": "1,2,3,4,5,10,15,14,13,12,11,6,7,8,9"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,3,6,12,11,10,7,4,5,8,9"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10",
                    "output": "1,2,4,6,8,10,9,7,5,3"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,3,6,12,11,10,7,4,5,8,9"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10",
                    "output": "1,2,4,6,8,10,9,7,5,3"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9",
                    "output": "1,2,3,6,9,8,7,4,5"
                },
                {
                    "input": "1,2,3,4",
                    "output": "1,2,4,3"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16",
                    "output": "1,2,3,4,8,12,16,15,14,13,9,5,6,7,10,11"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20",
                    "output": "1,2,3,4,5,10,15,20,19,18,17,16,11,6,7,8,9,14,13,12"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9",
                    "output": "1,2,3,6,9,8,7,4,5"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10",
                    "output": "1,2,4,6,8,10,9,7,5,3"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16",
                    "output": "1,2,3,4,8,12,16,15,14,13,9,5,6,7,10,11"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,3,6,12,11,10,7,4,5,8,9"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9",
                    "output": "1,2,4,7,5,3,6,8,9"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,3,6,12,11,10,7,4,5,8,9"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9",
                    "output": "1,2,4,7,5,3,6,8,9"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16",
                    "output": "1,2,3,4,8,12,16,15,14,13,9,5,6,7,10,11"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,3,6,12,11,10,7,4,5,8,9"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10",
                    "output": "1,2,4,6,8,10,9,7,5,3"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "1,2,3,6,12,11,10,7,4,5,8,9"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10",
                    "output": "1,2,3,5,7,4,6,8,9,10"
                }
            ],
            "java": "import java.util.Scanner;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int m = sc.nextInt();\n        int n = sc.nextInt();\n        int[][] matrix = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                matrix[i][j] = sc.nextInt();\n            }\n        }\n        List<Integer> result = spiralOrder(matrix);\n        System.out.println(result);\n    }\n\n    public static List<Integer> spiralOrder(int[][] matrix) {\n        // Implement your solution here\n        return new ArrayList<>();\n    }\n}",
            "cpp": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> spiralOrder(vector<vector<int>>& matrix) {\n    // Implement your solution here\n    return vector<int>();\n}\n\nint main() {\n    int m, n;\n    cin >> m >> n;\n    vector<vector<int>> matrix(m, vector<int>(n));\n    for (int i = 0; i < m; ++i) {\n        for (int j = 0; j < n; ++j) {\n            cin >> matrix[i][j];\n        }\n    }\n    vector<int> result = spiralOrder(matrix);\n    for (int num : result) {\n        cout << num << ' ';\n    }\n    cout << endl;\n    return 0;\n}",
            "c": "#include <stdio.h>\n\nvoid spiralOrder(int matrix[][10], int m, int n, int result[]) {\n    // Implement your solution here\n}\n\nint main() {\n    int m, n;\n    scanf(\"%d %d\", &m, &n);\n    int matrix[10][10];\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            scanf(\"%d\", &matrix[i][j]);\n        }\n    }\n    int result[100];\n    spiralOrder(matrix, m, n, result);\n    for (int i = 0; i < m * n; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
            "python": "def spiralOrder(matrix):\n    # Implement your solution here\n    return []\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().strip().split()))\n    m = data[0]\n    n = data[1]\n    matrix = []\n    index = 2\n    for i in range(m):\n        matrix.append(data[index:index + n])\n        index += n\n    result = spiralOrder(matrix)\n    print(result)\n\nif __name__ == '__main__':\n    main()"
        },
        {
            "id": "12",
            "name": "Contains Duplicate",
            "problem_statement": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.",
            "constraints": "1 <= nums.length <= 10^5\n-10^9 <= nums[i] <= 10^9",
            "level": "easy",
            "testcase": [
                {
                    "input": "1,2,3,1",
                    "output": "true"
                },
                {
                    "input": "1,2,3,4",
                    "output": "false"
                },
                {
                    "input": "1,1,1,3,3,4,3,2,4,2",
                    "output": "true"
                },
                {
                    "input": "5,6,7,8,9,10,11,12",
                    "output": "false"
                },
                {
                    "input": "5,5,6,6",
                    "output": "true"
                },
                {
                    "input": "100,200,300,400,500,600,700,800,900,1000",
                    "output": "false"
                },
                {
                    "input": "1,2,2,3,4,5,6",
                    "output": "true"
                },
                {
                    "input": "2,4,6,8,10,12,14",
                    "output": "false"
                },
                {
                    "input": "7,8,9,10,11,12,12",
                    "output": "true"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10",
                    "output": "false"
                },
                {
                    "input": "10,20,30,40,50,60,70,80,90,100,100",
                    "output": "true"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9",
                    "output": "false"
                },
                {
                    "input": "1,1,2,2,3,3",
                    "output": "true"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20",
                    "output": "false"
                },
                {
                    "input": "2,4,6,8,10,12,14,14",
                    "output": "true"
                },
                {
                    "input": "1,1,1,1,1,1,1,1,1,1",
                    "output": "true"
                },
                {
                    "input": "99,98,97,96,95,94,93,92,91,90",
                    "output": "false"
                },
                {
                    "input": "1,2,3,4,5,6,6",
                    "output": "true"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20",
                    "output": "false"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,8",
                    "output": "true"
                },
                {
                    "input": "10,20,30,40,50,60,70,80,90,100",
                    "output": "false"
                },
                {
                    "input": "100,200,300,400,500,600,700,800,900,1000,500",
                    "output": "true"
                },
                {
                    "input": "5,10,15,20,25,30,35,40,45,50",
                    "output": "false"
                },
                {
                    "input": "5,10,15,20,25,30,35,40,45,50,50",
                    "output": "true"
                },
                {
                    "input": "1,2,3,4,5,5",
                    "output": "true"
                },
                {
                    "input": "2,3,4,5,6,7,8,9,10",
                    "output": "false"
                },
                {
                    "input": "2,2,3,4,5",
                    "output": "true"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12",
                    "output": "false"
                },
                {
                    "input": "1,2,3,4,5,5,6,7",
                    "output": "true"
                },
                {
                    "input": "2,4,6,8,10,12,14,16,18",
                    "output": "false"
                },
                {
                    "input": "2,4,6,8,10,12,14,16,16",
                    "output": "true"
                },
                {
                    "input": "1000,2000,3000,4000,5000,6000,7000,8000,9000",
                    "output": "false"
                },
                {
                    "input": "1000,2000,3000,4000,5000,6000,7000,8000,9000,5000",
                    "output": "true"
                },
                {
                    "input": "1,1,2,3,4,5",
                    "output": "true"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9",
                    "output": "false"
                },
                {
                    "input": "1,1,1,2,2,3,3,4",
                    "output": "true"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20",
                    "output": "false"
                },
                {
                    "input": "5,5,6,7,8",
                    "output": "true"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10",
                    "output": "false"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,9",
                    "output": "true"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10",
                    "output": "false"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,10",
                    "output": "true"
                },
                {
                    "input": "10,20,30,40,50,60,70,80,90",
                    "output": "false"
                },
                {
                    "input": "10,20,30,40,50,60,70,80,90,30",
                    "output": "true"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10,10",
                    "output": "true"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9",
                    "output": "false"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,9,9",
                    "output": "true"
                }
            ],
            "java": "import java.util.HashSet;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String[] input = sc.nextLine().split(\",\");\n        HashSet<Integer> set = new HashSet<>();\n        boolean hasDuplicate = false;\n        for (String s : input) {\n            int num = Integer.parseInt(s);\n            if (!set.add(num)) {\n                hasDuplicate = true;\n                break;\n            }\n        }\n        System.out.println(hasDuplicate);\n    }\n}",
            "cpp": "#include <iostream>\n#include <unordered_set>\n#include <sstream>\n#include <string>\n\nusing namespace std;\n\nbool containsDuplicate(vector<int>& nums) {\n    unordered_set<int> seen;\n    for (int num : nums) {\n        if (seen.find(num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n\nint main() {\n    string line;\n    getline(cin, line);\n    stringstream ss(line);\n    vector<int> nums;\n    int num;\n    char comma;\n    while (ss >> num) {\n        nums.push_back(num);\n        ss >> comma;\n    }\n    cout << (containsDuplicate(nums) ? \"true\" : \"false\") << endl;\n    return 0;\n}",
            "c": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdlib.h>\n\nbool containsDuplicate(int* nums, int numsSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] == nums[j]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nint main() {\n    int nums[100000];\n    int num;\n    int count = 0;\n    while (scanf(\"%d\", &num) != EOF) {\n        nums[count++] = num;\n    }\n    bool result = containsDuplicate(nums, count);\n    printf(result ? \"true\\n\" : \"false\\n\");\n    return 0;\n}",
            "python": "def containsDuplicate(nums):\n    return len(nums) != len(set(nums))\n\nif __name__ == '__main__':\n    import sys\n    input = sys.stdin.read\n    nums = list(map(int, input().strip().split()))\n    print(containsDuplicate(nums))"
        },        
        {
            "id": "13",
            "name": "Sort Character by Frequency",
            "problem_statement": "Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string. Return the sorted string. If there are multiple answers, return any of them.",
            "constraints": "1 <= s.length <= 5 * 10^5\ns consists of uppercase and lowercase English letters and digits.",
            "level": "easy",
            "testcase": [
                {
                    "input": "tree",
                    "output": "eert"
                },
                {
                    "input": "cccaaa",
                    "output": "aaaccc"
                },
                {
                    "input": "Aabb",
                    "output": "bbAa"
                },
                {
                    "input": "aabbcc",
                    "output": "aabbcc"
                },
                {
                    "input": "abc",
                    "output": "abc"
                },
                {
                    "input": "aabbccdd",
                    "output": "aabbccdd"
                },
                {
                    "input": "aaa",
                    "output": "aaa"
                },
                {
                    "input": "zzzzxxxyyy",
                    "output": "zzzxyyyxxx"
                },
                {
                    "input": "abccba",
                    "output": "aabbcc"
                },
                {
                    "input": "helloworld",
                    "output": "lllooedhrw"
                },
                {
                    "input": "wxyz",
                    "output": "wxyz"
                },
                {
                    "input": "aaabbbcccddd",
                    "output": "dddcccbbbbaa"
                },
                {
                    "input": "123321",
                    "output": "112233"
                },
                {
                    "input": "qwertyuiop",
                    "output": "qwertyuiop"
                },
                {
                    "input": "a",
                    "output": "a"
                },
                {
                    "input": "aaabbb",
                    "output": "aaabbb"
                },
                {
                    "input": "abcdabcd",
                    "output": "abcdabcd"
                },
                {
                    "input": "aaabbbccc",
                    "output": "aaabbbccc"
                },
                {
                    "input": "abcde",
                    "output": "abcde"
                },
                {
                    "input": "pppppqqqqq",
                    "output": "pppppqqqqq"
                },
                {
                    "input": "zzzzzyyyyy",
                    "output": "zzzzzzyyyyy"
                },
                {
                    "input": "mmnnn",
                    "output": "nnnmm"
                },
                {
                    "input": "aabb",
                    "output": "aabb"
                },
                {
                    "input": "ffggg",
                    "output": "gggff"
                },
                {
                    "input": "ttttttttttt",
                    "output": "ttttttttttt"
                },
                {
                    "input": "xyzzyx",
                    "output": "yyzzxx"
                },
                {
                    "input": "ravi",
                    "output": "arvi"
                },
                {
                    "input": "ccccaaa",
                    "output": "cccaaa"
                },
                {
                    "input": "aaaaa",
                    "output": "aaaaa"
                },
                {
                    "input": "mno",
                    "output": "mno"
                },
                {
                    "input": "qwertyy",
                    "output": "yyqwert"
                },
                {
                    "input": "zzzxxxyyy",
                    "output": "zzzxxxyyy"
                },
                {
                    "input": "dddddccc",
                    "output": "dddddccc"
                },
                {
                    "input": "123",
                    "output": "123"
                },
                {
                    "input": "111222",
                    "output": "111222"
                },
                {
                    "input": "turing",
                    "output": "turing"
                },
                {
                    "input": "zzzzyyyy",
                    "output": "zzzzyyyy"
                },
                {
                    "input": "abcdd",
                    "output": "ddabc"
                },
                {
                    "input": "abcdef",
                    "output": "abcdef"
                },
                {
                    "input": "aabbccdd",
                    "output": "aabbccdd"
                },
                {
                    "input": "zyx",
                    "output": "zyx"
                },
                {
                    "input": "ttttcccc",
                    "output": "ttttcccc"
                },
                {
                    "input": "mmmm",
                    "output": "mmmm"
                },
                {
                    "input": "yyx",
                    "output": "yyx"
                },
                {
                    "input": "qqqqww",
                    "output": "qqqqww"
                },
                {
                    "input": "abcabc",
                    "output": "abcabc"
                }
            ],
            "java": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine();\n        System.out.println(frequencySort(s));\n    }\n\n    public static String frequencySort(String s) {\n        Map<Character, Integer> frequencyMap = new HashMap<>();\n        for (char c : s.toCharArray()) {\n            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);\n        }\n        List<Map.Entry<Character, Integer>> list = new ArrayList<>(frequencyMap.entrySet());\n        list.sort((a, b) -> b.getValue() - a.getValue());\n        StringBuilder sb = new StringBuilder();\n        for (Map.Entry<Character, Integer> entry : list) {\n            for (int i = 0; i < entry.getValue(); i++) {\n                sb.append(entry.getKey());\n            }\n        }\n        return sb.toString();\n    }\n}",
            "cpp": "#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <algorithm>\n#include <string>\n\nusing namespace std;\n\nstring frequencySort(string s) {\n    unordered_map<char, int> freq;\n    for (char c : s) {\n        freq[c]++;\n    }\n    vector<pair<char, int>> freqVec(freq.begin(), freq.end());\n    sort(freqVec.begin(), freqVec.end(), [](const pair<char, int>& a, const pair<char, int>& b) {\n        return b.second < a.second;\n    });\n    string result;\n    for (const auto& p : freqVec) {\n        result.append(p.second, p.first);\n    }\n    return result;\n}\n\nint main() {\n    string s;\n    getline(cin, s);\n    cout << frequencySort(s) << endl;\n    return 0;\n}",
            "c": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\n#define MAX_CHAR 256\n\ntypedef struct {\n    char character;\n    int frequency;\n} CharFreq;\n\nint compare(const void *a, const void *b) {\n    return ((CharFreq*)b)->frequency - ((CharFreq*)a)->frequency;\n}\n\nvoid frequencySort(char *s, char *result) {\n    int freq[MAX_CHAR] = {0};\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        freq[(int)s[i]]++;\n    }\n    CharFreq charFreq[MAX_CHAR];\n    int k = 0;\n    for (int i = 0; i < MAX_CHAR; i++) {\n        if (freq[i] > 0) {\n            charFreq[k].character = i;\n            charFreq[k].frequency = freq[i];\n            k++;\n        }\n    }\n    qsort(charFreq, k, sizeof(CharFreq), compare);\n    int index = 0;\n    for (int i = 0; i < k; i++) {\n        for (int j = 0; j < charFreq[i].frequency; j++) {\n            result[index++] = charFreq[i].character;\n        }\n    }\n    result[index] = '\\0';\n}\n\nint main() {\n    char s[500001];\n    char result[500001];\n    fgets(s, sizeof(s), stdin);\n    s[strcspn(s, \"\\n\")] = '\\0'; // Remove trailing newline\n    frequencySort(s, result);\n    printf(\"%s\\n\", result);\n    return 0;\n}",
            "python": "from collections import Counter\n\ndef frequencySort(s):\n    freq = Counter(s)\n    sorted_chars = sorted(freq.items(), key=lambda x: -x[1])\n    return ''.join(char * count for char, count in sorted_chars)\n\nif __name__ == '__main__':\n    import sys\n    input = sys.stdin.read().strip()\n    print(frequencySort(input))"
        },
        {
            "id": "14",
            "name": "Non-Overlapping Intervals",
            "problem_statement": "Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.",
            "constraints": "1 <= intervals.length <= 10^5\nintervals[i].length == 2\n-5 * 10^4 <= starti < endi <= 5 * 10^4",
            "level": "easy",
            "testcase": [
                {
                    "input": "1,2,2,3,3,4,1,3",
                    "output": "1"
                },
                {
                    "input": "1,2,1,2,1,2",
                    "output": "2"
                },
                {
                    "input": "1,2,2,3",
                    "output": "0"
                },
                {
                    "input": "1,2,2,3,3,4,5,6,7,8",
                    "output": "0"
                },
                {
                    "input": "1,4,2,3,3,6",
                    "output": "1"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,9,10",
                    "output": "0"
                },
                {
                    "input": "1,3,2,4,5,7,6,8",
                    "output": "2"
                },
                {
                    "input": "1,2,2,3,4,5,7,8",
                    "output": "0"
                },
                {
                    "input": "1,5,2,6,3,7,4,8",
                    "output": "2"
                },
                {
                    "input": "1,3,3,5,6,8,8,10",
                    "output": "0"
                },
                {
                    "input": "1,4,2,5,3,6,7,8",
                    "output": "2"
                },
                {
                    "input": "1,2,2,3,3,4,4,5",
                    "output": "0"
                },
                {
                    "input": "1,5,6,10,2,6,5,8",
                    "output": "2"
                },
                {
                    "input": "1,3,2,4,3,5,4,6",
                    "output": "2"
                },
                {
                    "input": "1,2,2,3,3,4,4,5,5,6",
                    "output": "0"
                },
                {
                    "input": "1,4,2,5,3,6,4,7",
                    "output": "2"
                },
                {
                    "input": "1,2,2,3,3,4,5,6",
                    "output": "0"
                },
                {
                    "input": "1,2,3,4,5,6,7,8,1,5",
                    "output": "1"
                },
                {
                    "input": "1,2,2,3,3,4,4,5,1,4",
                    "output": "1"
                },
                {
                    "input": "1,6,2,5,3,4,7,8",
                    "output": "2"
                },
                {
                    "input": "1,2,3,4,5,6,7,9,8,10",
                    "output": "1"
                },
                {
                    "input": "1,2,3,5,4,6,7,8",
                    "output": "1"
                },
                {
                    "input": "1,3,2,4,5,7,6,8",
                    "output": "1"
                },
                {
                    "input": "1,2,3,4,2,5,4,6",
                    "output": "2"
                },
                {
                    "input": "1,2,3,4,5,6,2,5",
                    "output": "1"
                },
                {
                    "input": "1,5,6,10,2,6,7,8",
                    "output": "2"
                },
                {
                    "input": "1,2,3,4,5,6,1,3",
                    "output": "1"
                },
                {
                    "input": "1,2,3,5,6,8,4,7",
                    "output": "2"
                },
                {
                    "input": "1,4,2,5,3,6,4,7,5,8",
                    "output": "2"
                },
                {
                    "input": "1,2,2,3,4,5,3,6",
                    "output": "1"
                },
                {
                    "input": "1,5,2,6,4,8,7,9",
                    "output": "2"
                },
                {
                    "input": "1,2,2,4,3,5,4,6",
                    "output": "2"
                },
                {
                    "input": "1,2,3,4,5,6,6,8",
                    "output": "1"
                },
                {
                    "input": "1,3,4,6,7,9,10,12",
                    "output": "0"
                },
                {
                    "input": "1,2,2,5,4,6,6,8",
                    "output": "2"
                },
                {
                    "input": "1,5,2,6,3,7,4,8",
                    "output": "2"
                },
                {
                    "input": "1,2,3,5,4,6,5,7",
                    "output": "2"
                },
                {
                    "input": "1,3,4,5,6,8,9,10",
                    "output": "0"
                },
                {
                    "input": "1,3,2,4,3,5,4,6",
                    "output": "2"
                },
                {
                    "input": "1,2,2,4,4,6,5,8",
                    "output": "2"
                },
                {
                    "input": "1,4,2,5,3,6,4,7",
                    "output": "2"
                },
                {
                    "input": "1,5,2,6,4,7,7,9",
                    "output": "2"
                },
                {
                    "input": "1,2,2,3,4,5,5,6",
                    "output": "1"
                },
                {
                    "input": "1,4,2,5,3,6,4,8",
                    "output": "2"
                },
                {
                    "input": "1,2,2,4,4,5,5,7",
                    "output": "2"
                },
                {
                    "input": "1,2,3,4,4,6,5,7",
                    "output": "1"
                },
                {
                    "input": "1,3,2,4,4,6,5,7",
                    "output": "2"
                },
                {
                    "input": "1,2,3,5,4,6,6,8",
                    "output": "1"
                }
            ],
            "java": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n        String[] parts = input.split(\",\");\n        int n = parts.length / 2;\n        int[][] intervals = new int[n][2];\n        for (int i = 0; i < n; i++) {\n            intervals[i][0] = Integer.parseInt(parts[2 * i]);\n            intervals[i][1] = Integer.parseInt(parts[2 * i + 1]);\n        }\n        System.out.println(eraseOverlapIntervals(intervals));\n    }\n\n    public static int eraseOverlapIntervals(int[][] intervals) {\n        if (intervals.length == 0) return 0;\n        Arrays.sort(intervals, Comparator.comparingInt(a -> a[1]));\n        int end = intervals[0][1];\n        int count = 0;\n        for (int i = 1; i < intervals.length; i++) {\n            if (intervals[i][0] < end) {\n                count++;\n            } else {\n                end = intervals[i][1];\n            }\n        }\n        return count;\n    }\n}",
            "cpp": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint eraseOverlapIntervals(vector<vector<int>>& intervals) {\n    if (intervals.empty()) return 0;\n    sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[1] < b[1];\n    });\n    int end = intervals[0][1];\n    int count = 0;\n    for (int i = 1; i < intervals.size(); i++) {\n        if (intervals[i][0] < end) {\n            count++;\n        } else {\n            end = intervals[i][1];\n        }\n    }\n    return count;\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    vector<vector<int>> intervals;\n    istringstream iss(input);\n    string token;\n    while (getline(iss, token, ',')) {\n        vector<int> interval(2);\n        interval[0] = stoi(token);\n        getline(iss, token, ',');\n        interval[1] = stoi(token);\n        intervals.push_back(interval);\n    }\n    cout << eraseOverlapIntervals(intervals) << endl;\n    return 0;\n}",
            "c": "#include <stdio.h>\n#include <stdlib.h>\n\nint compare(const void *a, const void *b) {\n    int *intervalA = (int *)a;\n    int *intervalB = (int *)b;\n    return intervalA[1] - intervalB[1];\n}\n\nint eraseOverlapIntervals(int intervals[][2], int size) {\n    if (size == 0) return 0;\n    qsort(intervals, size, sizeof(int) * 2, compare);\n    int end = intervals[0][1];\n    int count = 0;\n    for (int i = 1; i < size; i++) {\n        if (intervals[i][0] < end) {\n            count++;\n        } else {\n            end = intervals[i][1];\n        }\n    }\n    return count;\n}\n\nint main() {\n    char input[100000];\n    fgets(input, sizeof(input), stdin);\n    int intervals[50000][2];\n    int size = 0;\n    char *token = strtok(input, \",\");\n    while (token) {\n        intervals[size][0] = atoi(token);\n        token = strtok(NULL, \",\");\n        intervals[size][1] = atoi(token);\n        size++;\n        token = strtok(NULL, \",\");\n    }\n    printf(\"%d\\n\", eraseOverlapIntervals(intervals, size));\n    return 0;\n}",
            "python": "def eraseOverlapIntervals(intervals):\n    if not intervals:\n        return 0\n    intervals.sort(key=lambda x: x[1])\n    end = intervals[0][1]\n    count = 0\n    for i in range(1, len(intervals)):\n        if intervals[i][0] < end:\n            count += 1\n        else:\n            end = intervals[i][1]\n    return count\n\nif __name__ == '__main__':\n    import sys\n    input = sys.stdin.read().strip()\n    parts = list(map(int, input.split(',')))\n    intervals = [parts[i:i + 2] for i in range(0, len(parts), 2)]\n    print(eraseOverlapIntervals(intervals))"
        
        },
        {
            "id": "15",
            "name": "Smallest Range",
            "problem_statement": "You are given an integer array nums and an integer k. For each index i where 0 <= i < nums.length, change nums[i] to be either nums[i] + k or nums[i] - k. The score of nums is the difference between the maximum and minimum elements in nums. Return the minimum score of nums after changing the values at each index.",
            "constraints": "1 <= nums.length <= 10^4\n0 <= nums[i] <= 10^4\n0 <= k <= 10^4",
            "level": "easy",
            "testcase": [
                {
                    "input": "1,0,2",
                    "output": "0"
                },
                {
                    "input": "0,10,2,3",
                    "output": "6"
                },
                {
                    "input": "1,3,6,3",
                    "output": "3"
                },
                {
                    "input": "1,5,9,4",
                    "output": "8"
                },
                {
                    "input": "1,5,10,2",
                    "output": "8"
                },
                {
                    "input": "3,8,12,5",
                    "output": "7"
                },
                {
                    "input": "4,7,11,3",
                    "output": "7"
                },
                {
                    "input": "2,6,8,4",
                    "output": "6"
                },
                {
                    "input": "10,15,20,5",
                    "output": "10"
                },
                {
                    "input": "1,1,1,10",
                    "output": "0"
                },
                {
                    "input": "5,15,25,10",
                    "output": "20"
                },
                {
                    "input": "7,9,15,3",
                    "output": "8"
                },
                {
                    "input": "3,8,15,6",
                    "output": "9"
                },
                {
                    "input": "1,7,11,4",
                    "output": "10"
                },
                {
                    "input": "2,4,6,2",
                    "output": "6"
                },
                {
                    "input": "10,12,15,1",
                    "output": "5"
                },
                {
                    "input": "4,9,14,5",
                    "output": "10"
                },
                {
                    "input": "6,8,10,2",
                    "output": "6"
                },
                {
                    "input": "2,5,8,3",
                    "output": "6"
                },
                {
                    "input": "3,7,12,4",
                    "output": "8"
                },
                {
                    "input": "5,10,15,5",
                    "output": "10"
                },
                {
                    "input": "8,12,16,2",
                    "output": "8"
                },
                {
                    "input": "3,5,8,3",
                    "output": "6"
                },
                {
                    "input": "1,3,6,5",
                    "output": "10"
                },
                {
                    "input": "7,10,14,3",
                    "output": "9"
                },
                {
                    "input": "2,4,8,3",
                    "output": "7"
                },
                {
                    "input": "6,12,18,6",
                    "output": "12"
                },
                {
                    "input": "4,8,12,2",
                    "output": "8"
                },
                {
                    "input": "5,7,10,4",
                    "output": "8"
                },
                {
                    "input": "10,20,30,5",
                    "output": "20"
                },
                {
                    "input": "1,6,11,5",
                    "output": "10"
                },
                {
                    "input": "7,9,15,2",
                    "output": "8"
                },
                {
                    "input": "3,6,9,3",
                    "output": "6"
                },
                {
                    "input": "5,10,15,4",
                    "output": "8"
                },
                {
                    "input": "2,4,6,1",
                    "output": "4"
                },
                {
                    "input": "1,5,9,3",
                    "output": "8"
                },
                {
                    "input": "6,9,15,3",
                    "output": "9"
                },
                {
                    "input": "4,8,12,3",
                    "output": "8"
                },
                {
                    "input": "10,14,18,2",
                    "output": "8"
                },
                {
                    "input": "5,10,20,7",
                    "output": "18"
                },
                {
                    "input": "1,3,7,2",
                    "output": "6"
                },
                {
                    "input": "3,6,10,4",
                    "output": "8"
                },
                {
                    "input": "2,5,8,3",
                    "output": "7"
                },
                {
                    "input": "8,12,16,4",
                    "output": "8"
                },
                {
                    "input": "7,9,11,2",
                    "output": "6"
                },
                {
                    "input": "1,4,7,3",
                    "output": "6"
                },
                {
                    "input": "5,8,12,3",
                    "output": "7"
                }
            ],
                "java": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n        int k = sc.nextInt();\n        String[] parts = input.split(\",\");\n        int[] nums = new int[parts.length];\n        for (int i = 0; i < parts.length; i++) {\n            nums[i] = Integer.parseInt(parts[i]);\n        }\n        System.out.println(smallestRange(nums, k));\n    }\n\n    public static int smallestRange(int[] nums, int k) {\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int num : nums) {\n            min = Math.min(min, num - k);\n            max = Math.max(max, num + k);\n        }\n        return Math.max(0, max - min);\n    }\n}",
                "cpp": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint smallestRange(vector<int>& nums, int k) {\n    int minVal = INT_MAX;\n    int maxVal = INT_MIN;\n    for (int num : nums) {\n        minVal = min(minVal, num - k);\n        maxVal = max(maxVal, num + k);\n    }\n    return max(0, maxVal - minVal);\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    int k;\n    cin >> k;\n    vector<int> nums;\n    istringstream iss(input);\n    string token;\n    while (getline(iss, token, ',')) {\n        nums.push_back(stoi(token));\n    }\n    cout << smallestRange(nums, k) << endl;\n    return 0;\n}",
                "c": "#include <stdio.h>\n#include <limits.h>\n\nint smallestRange(int *nums, int size, int k) {\n    int minVal = INT_MAX;\n    int maxVal = INT_MIN;\n    for (int i = 0; i < size; i++) {\n        minVal = (nums[i] - k < minVal) ? nums[i] - k : minVal;\n        maxVal = (nums[i] + k > maxVal) ? nums[i] + k : maxVal;\n    }\n    return (maxVal - minVal > 0) ? maxVal - minVal : 0;\n}\n\nint main() {\n    char input[100000];\n    fgets(input, sizeof(input), stdin);\n    int k;\n    scanf(\"%d\", &k);\n    int nums[10000];\n    int size = 0;\n    char *token = strtok(input, \",\");\n    while (token) {\n        nums[size++] = atoi(token);\n        token = strtok(NULL, \",\");\n    }\n    printf(\"%d\\n\", smallestRange(nums, size, k));\n    return 0;\n}",
                "python": "def smallestRange(nums, k):\n    min_val = float('inf')\n    max_val = float('-inf')\n    for num in nums:\n        min_val = min(min_val, num - k)\n        max_val = max(max_val, num + k)\n    return max(0, max_val - min_val)\n\nif __name__ == '__main__':\n    import sys\n    input = sys.stdin.read().strip().split(',')\n    k = int(input.pop())\n    nums = list(map(int, input))\n    print(smallestRange(nums, k))"
        },
        {
            "id": "16",
            "name": "Peak Element",
            "problem_statement": "You are given an integer mountain array arr of length n where the values increase to a peak element and then decrease. Return the index of the peak element. Your task is to solve it in O(log(n)) time complexity.",
            "constraints": "3 <= arr.length <= 10^5\n0 <= arr[i] <= 10^6\narr is guaranteed to be a mountain array.",
            "level": "easy",
            "testcase": [
                {
                    "input": "0,1,0",
                    "output": "1",
                    "explanation": "The peak element is 1, which is at index 1."
                },
                {
                    "input": "0,2,1,0",
                    "output": "1",
                    "explanation": "The peak element is 2, which is at index 1."
                },
                {
                    "input": "0,10,5,2",
                    "output": "1",
                    "explanation": "The peak element is 10, which is at index 1."
                },
                {
                    "input": "0,1,2,1,0",
                    "output": "2",
                    "explanation": "The peak element is 2, which is at index 2."
                },
                {
                    "input": "1,3,8,12,4,2",
                    "output": "3",
                    "explanation": "The peak element is 12, which is at index 3."
                },
                {
                    "input": "1,2,3,4,5,4,3,2,1",
                    "output": "4",
                    "explanation": "The peak element is 5, which is at index 4."
                },
                {
                    "input": "1,3,5,7,9,7,5,3,1",
                    "output": "4",
                    "explanation": "The peak element is 9, which is at index 4."
                },
                {
                    "input": "0,1,2,3,2,1,0",
                    "output": "3",
                    "explanation": "The peak element is 3, which is at index 3."
                },
                {
                    "input": "0,2,4,8,4,2,0",
                    "output": "3",
                    "explanation": "The peak element is 8, which is at index 3."
                },
                {
                    "input": "0,1,0,2,1",
                    "output": "3",
                    "explanation": "The peak element is 2, which is at index 3."
                }
            ],
            "java": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n        int[] arr = Arrays.stream(input.split(\",\")).mapToInt(Integer::parseInt).toArray();\n        // Call the function here\n        // System.out.println(findPeakElement(arr));\n    }\n}",
            "cpp": "#include <iostream>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nint main() {\n    string input;\n    getline(cin, input);\n    vector<int> arr;\n    istringstream iss(input);\n    string token;\n    while (getline(iss, token, \",\")) {\n        arr.push_back(stoi(token));\n    }\n    // Call the function here\n    // cout << findPeakElement(arr) << endl;\n    return 0;\n}",
            "c": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    char input[100000];\n    fgets(input, sizeof(input), stdin);\n    int arr[100000];\n    int size = 0;\n    char *token = strtok(input, \",\");\n    while (token) {\n        arr[size++] = atoi(token);\n        token = strtok(NULL, \",\");\n    }\n    // Call the function here\n    // printf(\"%d\\n\", findPeakElement(arr, size));\n    return 0;\n}",
            "python": "def main():\n    import sys\n    input = sys.stdin.read().strip().split(',')\n    arr = list(map(int, input))\n    # Call the function here\n    # print(findPeakElement(arr))\n\nif __name__ == '__main__':\n    main()"
        },
        {
            "id": "17",
            "name": "Koko Eat Bananas",
            "problem_statement": "Koko loves to eat bananas. There are n piles of bananas, and the ith pile has piles[i] bananas. The guards have gone and will come back in h hours. Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour. Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return. Return the minimum integer k such that she can eat all the bananas within h hours.",
            "constraints": "1 <= piles.length <= 10^4\npiles.length <= h <= 10^9\n1 <= piles[i] <= 10^9",
            "level": "easy",
            "testcase": [
                {
                    "input": "3,6,7,11,8,8",
                    "output": "4",
                    "explanation": "Koko can finish eating all the bananas in 8 hours with a speed of 4 bananas per hour."
                },
                {
                    "input": "30,11,23,4,20,5",
                    "output": "30",
                    "explanation": "Koko must eat all the bananas in 5 hours. The optimal speed is 30 bananas per hour."
                },
                {
                    "input": "30,11,23,4,20,6",
                    "output": "23",
                    "explanation": "With a speed of 23 bananas per hour, Koko can finish eating all the bananas within 6 hours."
                },
                {
                    "input": "312884470,968709470",
                    "output": "1"
                },
                {
                    "input": "332484035,524908576,855865114,632922376,222257295,690155293,112677673,679580077,337406589,290818316,877337160,901728858,679284947,688210097,692137887,718203285,629455728,941802184,823855818",
                    "output": "14"
                }
            ],
            "java": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n        String[] parts = input.split(\",\");\n        int h = Integer.parseInt(parts[parts.length - 1]);\n        int[] piles = Arrays.stream(parts, 0, parts.length - 1).mapToInt(Integer::parseInt).toArray();\n        // Call the function here\n        // System.out.println(minEatingSpeed(piles, h));\n    }\n}",
            "cpp": "#include <iostream>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nint main() {\n    string input;\n    getline(cin, input);\n    istringstream iss(input);\n    vector<int> piles;\n    int h;\n    string token;\n    while (getline(iss, token, \",\")) {\n        piles.push_back(stoi(token));\n    }\n    h = piles.back();\n    piles.pop_back();\n    // Call the function here\n    // cout << minEatingSpeed(piles, h) << endl;\n    return 0;\n}",
            "c": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    char input[100000];\n    fgets(input, sizeof(input), stdin);\n    int piles[100000];\n    int size = 0;\n    char *token = strtok(input, \",\");\n    int h;\n    while (token) {\n        piles[size++] = atoi(token);\n        token = strtok(NULL, \",\");\n    }\n    h = piles[size - 1];\n    size--;\n    // Call the function here\n    // printf(\"%d\\n\", minEatingSpeed(piles, size, h));\n    return 0;\n}",
            "python": "def main():\n    import sys\n    input = sys.stdin.read().strip().split(',')\n    h = int(input[-1])\n    piles = list(map(int, input[:-1]))\n    # Call the function here\n    # print(minEatingSpeed(piles, h))\n\nif __name__ == '__main__':\n    main()"
        },
        {
            "id": "18",
            "name": "Minimum Garden Perimeter to Collect Enough Apples",
            "problem_statement": "In a garden represented as an infinite 2D grid, there is an apple tree planted at every integer coordinate. The apple tree planted at an integer coordinate (i, j) has |i| + |j| apples growing on it. You will buy an axis-aligned square plot of land that is centered at (0, 0). Given an integer neededApples, return the minimum perimeter of a plot such that at least neededApples apples are inside or on the perimeter of that plot.",
            "constraints": "1 <= neededApples <= 10^15",
            "level": "easy",
            "testcase": [
                {
                    "input": "1",
                    "output": "8",
                    "explanation": "A square plot of side length 2 has 12 apples inside. The perimeter is 2 * 4 = 8."
                },
                {
                    "input": "13",
                    "output": "16",
                    "explanation": "A square plot of side length 4 has 44 apples inside. The perimeter is 4 * 4 = 16."
                },
                {
                    "input": "1000000000",
                    "output": "5040"
                },
                {
                    "input": "2",
                    "output": "8"
                },
                {
                    "input": "10",
                    "output": "8"
                },
                {
                    "input": "100",
                    "output": "16"
                },
                {
                    "input": "1000",
                    "output": "32"
                },
                {
                    "input": "5000",
                    "output": "40"
                },
                {
                    "input": "10000",
                    "output": "48"
                },
                {
                    "input": "25000",
                    "output": "64"
                },
                {
                    "input": "50000",
                    "output": "80"
                },
                {
                    "input": "75000",
                    "output": "88"
                },
                {
                    "input": "1000000000",
                    "output": "2016"
                },
                {
                    "input": "2000000000",
                    "output": "2560"
                },
                {
                    "input": "3000000000",
                    "output": "3136"
                },
                {
                    "input": "4000000000",
                    "output": "3648"
                },
                {
                    "input": "5000000000",
                    "output": "4224"
                },
                {
                    "input": "6000000000",
                    "output": "4800"
                },
                {
                    "input": "7000000000",
                    "output": "5376"
                },
                {
                    "input": "8000000000",
                    "output": "5952"
                },
                {
                    "input": "20000000000",
                    "output": "12480"
                }
            ],
            "java": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        long neededApples = sc.nextLong();\n        // Call the function here\n        // System.out.println(minPerimeter(neededApples));\n    }\n}",
            "cpp": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    long long neededApples;\n    cin >> neededApples;\n    // Call the function here\n    // cout << minPerimeter(neededApples) << endl;\n    return 0;\n}",
            "c": "#include <stdio.h>\n\nint main() {\n    long long neededApples;\n    scanf(\"%lld\", &neededApples);\n    // Call the function here\n    // printf(\"%lld\\n\", minPerimeter(neededApples));\n    return 0;\n}",
            "python": "def main():\n    import sys\n    neededApples = int(sys.stdin.read().strip())\n    # Call the function here\n    # print(minPerimeter(neededApples))\n\nif __name__ == '__main__':\n    main()"
        }
        
    ]
}
